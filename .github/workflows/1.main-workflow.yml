name: Main Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  actions: read
  contents: read
  checks: write

jobs:
  affected:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
      affected-apps: ${{ steps.affected.outputs.affected-apps }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install

      - name: Get affected apps
        id: affected
        env:
          Apps: 'neoavath df-auction-crawling'
        run: |
          AFFECTED=$(pnpm nx show projects --affected --base=${{ github.event.before }} --head=${{ github.sha }} --plain)
          SHOULD_DEPLOY=false
          AFFECTED_APPS="[]"  # 기본값으로 빈 JSON 배열 설정
          echo "AFFECTED: $AFFECTED"

          # 영향받은 앱 목록을 저장할 배열
          DEPLOY_APPS=()

          # 영향받은 앱들 중에 Apps 환경변수에 포함된 것이 있는지 체크
          for APP in ${{ env.Apps }}; do
            if echo "$AFFECTED" | grep -qw "$APP"; then
              SHOULD_DEPLOY=true
              echo "Affected apps: $APP"
              DEPLOY_APPS+=("$APP")
            fi
          done

          # 디버깅 정보 출력
          echo "DEPLOY_APPS size: ${#DEPLOY_APPS[@]}"
          echo "DEPLOY_APPS contents: ${DEPLOY_APPS[@]}"

          if [ "${#DEPLOY_APPS[@]}" -gt 0 ]; then
            # 배열을 JSON 형식으로 변환
            AFFECTED_APPS=$(printf '"%s",' "${DEPLOY_APPS[@]}" | sed 's/,$//' | awk '{print "["$0"]"}')
            echo "Generated AFFECTED_APPS: $AFFECTED_APPS"
          fi

          echo "should_deploy=$SHOULD_DEPLOY" >> "$GITHUB_OUTPUT"
          echo "affected-apps=$AFFECTED_APPS" >> "$GITHUB_OUTPUT"

          # GitHub 출력 확인
          cat $GITHUB_OUTPUT

  debug-output:
    needs: affected
    runs-on: ubuntu-latest
    steps:
      - name: Debug output
        run: |
          echo "should_deploy: ${{ needs.affected.outputs.should_deploy }}"
          echo "affected-apps: ${{ needs.affected.outputs.affected-apps }}"

  deploy:
    needs: affected
    if: needs.affected.outputs.should_deploy == true
    uses: ./.github/workflows/2.neoavath-fe-workflow.yml
    with:
      temp: ${{ matrix.app }}
    secrets: inherit
    strategy:
      matrix:
        app: ${{ fromJson(needs.affected.outputs.affected-apps) }}

  # CI-CD:
  #   needs: affected
  #   if: needs.affected.outputs.affected != ''
  #   uses: ./.github/workflows/2.neoavath-fe-workflow.yml
  #   strategy:
  #     matrix:
  #       app: ${{ fromJson(needs.affected.outputs.affected-apps) }}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: 8

  #     - name: Install dependencies
  #       run: pnpm install

  #     - name: Build affected app
  #       run: pnpm nx build ${{ matrix.app }}

  #     - name: Configure AWS credentials
  #       if: matrix.app == 'crawler'
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-northeast-2

  #     - name: Deploy to EC2
  #       if: matrix.app == 'crawler'
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           cd /home/ubuntu/app
  #           git pull origin main
  #           pnpm install
  #           pnpm nx build crawler
  #           pm2 reload ecosystem.config.js
